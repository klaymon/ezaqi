import Head from 'next/head'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'
import { useRouter } from 'next/router'
import { API_KEY, categoryColorMap, isDevelopment } from '../shared/constants.js'

export default function Home (props) {
  const router = useRouter()
  const [aqi, setAqi] = useState(props.aqi || [])
  const [zipCode, setZipCode] = useState(props.zipCode || '')

  const handleGeolocationSuccess = async ({ latitude, longitude }) => {
    if (fetch && latitude && longitude) {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`)
      const result = await response.json()
      const postCode = result?.address?.postcode?.slice(0, 5)
      if (!!postCode) {
        setZipCode(postCode)
        await fetchNewAqi(postCode)
      }
    }
  }

  useEffect(() => {
    if (!isDevelopment) {
      window.dataLayer = window.dataLayer || []
      function gtag () {
        window.dataLayer.push(arguments)
      }
      gtag('js', new Date())
      gtag('config', 'G-ERHE62H19S', {
        page_location: window.location.href,
        page_path: window.location.pathname,
        page_title: window.document.title
      })
    }
    if (typeof window !== 'undefined') {
      window.navigator.geolocation.getCurrentPosition(
        (position) => handleGeolocationSuccess(position.coords),
        (err) => err,
        { timeout: 5000, maximumAge: 60000 * 30 }
      )
    }
  }, [])

  const handleChangeZipCode = async (e) => {
    e.preventDefault()

    const newZipCode = e?.target?.zipcode.value

    if (newZipCode.length !== 5 || !newZipCode.match(/\d/g)) {
      return
    }

    setZipCode(newZipCode)
    if (!newZipCode) return

    await fetchNewAqi(newZipCode)
    router.push(`/${newZipCode}`, '', { shallow: true })
  }

  const fetchNewAqi = async (newZipCode) => {
    const url = `https://www.airnowapi.org/aq/observation/zipCode/current/?format=application/json&zipCode=${newZipCode}&distance=1&API_KEY=${API_KEY}`
    const response = await fetch(url)
    const result = await response.json()
    const realResult = result.filter(object => object.ParameterName === 'PM2.5')[0] || { AQI: 0, Category: { Number: 0 } }
    setAqi([realResult.AQI, realResult.Category.Number])
  }

  const mappedColor = categoryColorMap[aqi[1]] || ''
  return (
    <div className={`${styles.container} ${styles[mappedColor]}`}>
      <Head>
        {!isDevelopment && <script async src='https://www.googletagmanager.com/gtag/js?id=G-ERHE62H19S' />}
        <title>AQI</title>
        <meta name='description' content='Easy AQI; powered by AirNow.gov; base code generated by create next app' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          AQI{!!aqi[0] && ': '}
          {!!aqi[0] && aqi[0]}
        </h1>
        <div>for</div>
        <div className={styles.description}>
          {zipCode}
        </div>
        <form className={styles.description} onSubmit={handleChangeZipCode}>
          <div>
            <label htmlFor='text' />
            <input type='text' id='zipcode' name='zipcode' placeholder='zip code' />
          </div>
          <div>
            <button>Submit</button>
          </div>
        </form>
      </main>

      <footer className={`${styles.footer} ${styles[mappedColor]}`}>
        <a
          href='https://www.airnow.gov/'
          target='_blank'
          rel='noopener noreferrer'
        >
          data powered by AirNow.gov API
        </a>
      </footer>
    </div>
  )
}
