import Head from 'next/head';
import { useCallback, useMemo, useState } from 'react';
import { useRouter } from 'next/router';

import { categoryColorMap } from '../utils/constants';
import styles from './index.module.css';

export default function Home(props: { aqi?: Array<any>; cityState: string; zipCode?: string }) {
  const router = useRouter();
  const [aqi, setAqi] = useState(props.aqi || []);
  const [cityState, setCityState] = useState(props.cityState || '');
  const [zipCode, setZipCode] = useState(props.zipCode || '');
  const mappedColor = useMemo(() => categoryColorMap[aqi[1] as keyof typeof categoryColorMap] || '', [aqi]);

  const fetchNewAqi = useCallback(
    async (newZipCode: string) => {
      const res = await fetch(`/api/aqi?zipcode=${newZipCode}`);
      if (!res) {
        setCityState('');
        return setAqi([]);
      }
      const result = await res.json();
      if (!result || !result.length) {
        setCityState('');
        return setAqi([]);
      }
      setAqi([result.AQI, result.Category.Number]);
      setCityState(`${result.ReportingArea}, ${result.StateCode}`);
      setZipCode(newZipCode);
    },
    [setAqi, setCityState, setZipCode],
  );

  const handleChangeZipCode = useCallback(async (e: any) => {
    e.preventDefault();

    const newZipCode = e?.target?.zipcode.value;

    if (newZipCode.length !== 5 || !newZipCode.match(/\d/g)) {
      return await handleNotZipCode(newZipCode);
    }

    if (!newZipCode) return;

    await fetchNewAqi(newZipCode);
    router.push(`/${newZipCode}`, '', { shallow: true });
  }, []);

  const handleGeolocationSuccess = useCallback(
    async ({ latitude, longitude }: { latitude: number; longitude: number }): Promise<void> => {
      if (fetch && latitude && longitude) {
        const response = await fetch(
          `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`,
        );
        const result = await response.json();
        const postCode = result?.address?.postcode?.slice(0, 5);
        if (!!postCode) {
          await fetchNewAqi(postCode);
        }
      }
    },
    [],
  );

  const handleNotZipCode = useCallback(async (value: string) => {
    const [city, state] = value.split(',');
    const response = await fetch(
      `https://nominatim.openstreetmap.org/search?city=${city?.trim()}${state ? `&state=${state.trim()}` : ''}&format=json`,
    );
    const result = await response.json();
    if (result.length) {
      const { lat, lon } = result[0];
      if (lat && lon) {
        await handleGeolocationSuccess({ latitude: lat, longitude: lon });
      }
    }
  }, []);

  return (
    <>
      <Head>
        <title>AQI</title>
        <meta name="description" content="Easy AQI; powered by AirNow.gov; base code generated by create t3 app" />
      </Head>
      <main className={`${styles.main} ${styles[mappedColor]}`}>
        <h1 className={styles.title}>
          AQI{!!aqi[0] && ': '}
          {!!aqi[0] && aqi[0]}
        </h1>
        <div>for</div>
        <div className={styles.description}>
          {cityState && cityState} {zipCode}
        </div>
        <form className={styles.description} onSubmit={handleChangeZipCode}>
          <div>
            <label htmlFor="text" />
            <input type="text" id="zipcode" name="zipcode" placeholder="zip code" />
          </div>
          <div>
            <button>Submit</button>
          </div>
        </form>

        <footer className={`${styles.footer} ${styles[mappedColor]}`}>
          <a href="https://www.airnow.gov/" target="_blank" rel="noopener noreferrer">
            data powered by AirNow.gov API
          </a>
        </footer>
      </main>
    </>
  );
}

export async function getServerSideProps(context: { query: { zipcode: number } }) {
  const zipCode = context?.query?.zipcode;

  if (!zipCode) {
    return {
      props: {},
    };
  }

  const res = await fetch(
    `https://www.airnowapi.org/aq/forecast/zipCode/?format=application/json&zipCode=${zipCode}&distance=10&API_KEY=9E5AECAD-C761-451C-861B-14F674DB9E45`,
  );
  const result = await res.json();

  if (!result || !result.length) {
    return {
      props: {},
    };
  }

  const realResult = result[0];

  return {
    props: {
      aqi: [realResult?.AQI, realResult?.Category?.Number],
      cityState: `${realResult.ReportingArea}, ${realResult.StateCode}`,
      zipCode,
    },
  };
}
